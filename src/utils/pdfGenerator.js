import jsPDF from "jspdf";

export const generateSongPDF = (song) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const maxWidth = pageWidth - 2 * margin;
  let yPosition = margin;

  // Helper function to add text with word wrap
  const addText = (text, fontSize, isBold = false, isCenter = false) => {
    doc.setFontSize(fontSize);
    doc.setFont("helvetica", isBold ? "bold" : "normal");

    if (isCenter) {
      const textWidth = doc.getTextWidth(text);
      const x = (pageWidth - textWidth) / 2;
      doc.text(text, x, yPosition);
      yPosition += fontSize * 0.5;
    } else {
      const lines = doc.splitTextToSize(text, maxWidth);
      lines.forEach((line) => {
        // Check if we need a new page
        if (yPosition > pageHeight - margin) {
          doc.addPage();
          yPosition = margin;
        }
        doc.text(line, margin, yPosition);
        yPosition += fontSize * 0.5;
      });
    }
  };

  // Add horizontal line
  const addLine = () => {
    doc.setDrawColor(200);
    doc.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;
  };

  // Title
  addText(song.songName || "Untitled Song", 20, true, true);
  yPosition += 5;

  // Artist
  if (song.artist) {
    addText(`by ${song.artist}`, 14, false, true);
    yPosition += 5;
  }

  addLine();

  // Song Details
  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");

  if (song.album) {
    addText(`Album: ${song.album}`, 10);
    yPosition += 2;
  }

  if (song.genre) {
    addText(`Genre: ${song.genre}`, 10);
    yPosition += 2;
  }

  if (song.SingerFname) {
    addText(`Singer: ${song.SingerFname}`, 10);
    yPosition += 2;
  }

  if (song.dateTime) {
    const date = new Date(song.dateTime).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
    addText(`Date: ${date}`, 10);
    yPosition += 2;
  }

  if (song.url) {
    doc.setTextColor(0, 0, 255);
    addText(`Listen: ${song.url}`, 10);
    doc.setTextColor(0);
    yPosition += 2;
  }

  yPosition += 10;
  addLine();

  // Lyrics and Chords
  if (song.lyricsAndChords) {
    addText("LYRICS & CHORDS", 14, true);
    yPosition += 5;

    doc.setFont("courier", "normal");
    doc.setFontSize(9);

    const lyricsLines = song.lyricsAndChords.split("\n");
    lyricsLines.forEach((line) => {
      if (yPosition > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }
      doc.text(line || " ", margin, yPosition);
      yPosition += 5;
    });

    yPosition += 5;
  }

  // Notes
  if (song.notes) {
    if (yPosition > pageHeight - margin - 30) {
      doc.addPage();
      yPosition = margin;
    }

    addLine();
    addText("NOTES", 14, true);
    yPosition += 5;

    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);

    const notesLines = song.notes.split("\n");
    notesLines.forEach((line) => {
      if (yPosition > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }
      const wrappedLines = doc.splitTextToSize(line || " ", maxWidth);
      wrappedLines.forEach((wrappedLine) => {
        doc.text(wrappedLine, margin, yPosition);
        yPosition += 5;
      });
    });
  }

  // Footer
  const totalPages = doc.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont("helvetica", "italic");
    doc.setTextColor(150);
    doc.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, {
      align: "center",
    });
    doc.text(
      "Generated by LJIM Song Lineup",
      pageWidth - margin,
      pageHeight - 10,
      { align: "right" }
    );
  }

  // Save the PDF
  const fileName = `${song.songName || "song"}_${
    song.artist || "unknown"
  }`.replace(/[^a-z0-9]/gi, "_");
  doc.save(`${fileName}.pdf`);
};
